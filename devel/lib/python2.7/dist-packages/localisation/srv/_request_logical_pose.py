# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from localisation/request_logical_poseRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class request_logical_poseRequest(genpy.Message):
  _md5sum = "120a515e012d96279de9e81c3aa4b0aa"
  _type = "localisation/request_logical_poseRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool request_msg
"""
  __slots__ = ['request_msg']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       request_msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(request_logical_poseRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.request_msg is None:
        self.request_msg = False
    else:
      self.request_msg = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.request_msg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.request_msg,) = _struct_B.unpack(str[start:end])
      self.request_msg = bool(self.request_msg)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.request_msg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.request_msg,) = _struct_B.unpack(str[start:end])
      self.request_msg = bool(self.request_msg)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from localisation/request_logical_poseResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class request_logical_poseResponse(genpy.Message):
  _md5sum = "10521e1264716de5831c54d482c1f58d"
  _type = "localisation/request_logical_poseResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Vector3 position
geometry_msgs/Quaternion orientation
geometry_msgs/Quaternion tgtorientation
geometry_msgs/Vector3 tgtposition
bool order_completed
bool conveyorPart
bool noPartFound


================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['position','orientation','tgtorientation','tgtposition','order_completed','conveyorPart','noPartFound']
  _slot_types = ['geometry_msgs/Vector3','geometry_msgs/Quaternion','geometry_msgs/Quaternion','geometry_msgs/Vector3','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position,orientation,tgtorientation,tgtposition,order_completed,conveyorPart,noPartFound

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(request_logical_poseResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.position is None:
        self.position = geometry_msgs.msg.Vector3()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.tgtorientation is None:
        self.tgtorientation = geometry_msgs.msg.Quaternion()
      if self.tgtposition is None:
        self.tgtposition = geometry_msgs.msg.Vector3()
      if self.order_completed is None:
        self.order_completed = False
      if self.conveyorPart is None:
        self.conveyorPart = False
      if self.noPartFound is None:
        self.noPartFound = False
    else:
      self.position = geometry_msgs.msg.Vector3()
      self.orientation = geometry_msgs.msg.Quaternion()
      self.tgtorientation = geometry_msgs.msg.Quaternion()
      self.tgtposition = geometry_msgs.msg.Vector3()
      self.order_completed = False
      self.conveyorPart = False
      self.noPartFound = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_14d3B.pack(_x.position.x, _x.position.y, _x.position.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.tgtorientation.x, _x.tgtorientation.y, _x.tgtorientation.z, _x.tgtorientation.w, _x.tgtposition.x, _x.tgtposition.y, _x.tgtposition.z, _x.order_completed, _x.conveyorPart, _x.noPartFound))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Vector3()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.tgtorientation is None:
        self.tgtorientation = geometry_msgs.msg.Quaternion()
      if self.tgtposition is None:
        self.tgtposition = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 115
      (_x.position.x, _x.position.y, _x.position.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.tgtorientation.x, _x.tgtorientation.y, _x.tgtorientation.z, _x.tgtorientation.w, _x.tgtposition.x, _x.tgtposition.y, _x.tgtposition.z, _x.order_completed, _x.conveyorPart, _x.noPartFound,) = _struct_14d3B.unpack(str[start:end])
      self.order_completed = bool(self.order_completed)
      self.conveyorPart = bool(self.conveyorPart)
      self.noPartFound = bool(self.noPartFound)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_14d3B.pack(_x.position.x, _x.position.y, _x.position.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.tgtorientation.x, _x.tgtorientation.y, _x.tgtorientation.z, _x.tgtorientation.w, _x.tgtposition.x, _x.tgtposition.y, _x.tgtposition.z, _x.order_completed, _x.conveyorPart, _x.noPartFound))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Vector3()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.tgtorientation is None:
        self.tgtorientation = geometry_msgs.msg.Quaternion()
      if self.tgtposition is None:
        self.tgtposition = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 115
      (_x.position.x, _x.position.y, _x.position.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.tgtorientation.x, _x.tgtorientation.y, _x.tgtorientation.z, _x.tgtorientation.w, _x.tgtposition.x, _x.tgtposition.y, _x.tgtposition.z, _x.order_completed, _x.conveyorPart, _x.noPartFound,) = _struct_14d3B.unpack(str[start:end])
      self.order_completed = bool(self.order_completed)
      self.conveyorPart = bool(self.conveyorPart)
      self.noPartFound = bool(self.noPartFound)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_14d3B = struct.Struct("<14d3B")
class request_logical_pose(object):
  _type          = 'localisation/request_logical_pose'
  _md5sum = 'c674f42d46687f11495636db257cd612'
  _request_class  = request_logical_poseRequest
  _response_class = request_logical_poseResponse
