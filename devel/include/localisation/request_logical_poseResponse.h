// Generated by gencpp from file localisation/request_logical_poseResponse.msg
// DO NOT EDIT!


#ifndef LOCALISATION_MESSAGE_REQUEST_LOGICAL_POSERESPONSE_H
#define LOCALISATION_MESSAGE_REQUEST_LOGICAL_POSERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>

namespace localisation
{
template <class ContainerAllocator>
struct request_logical_poseResponse_
{
  typedef request_logical_poseResponse_<ContainerAllocator> Type;

  request_logical_poseResponse_()
    : position()
    , orientation()
    , tgtorientation()
    , tgtposition()
    , order_completed(false)
    , conveyorPart(false)
    , noPartFound(false)  {
    }
  request_logical_poseResponse_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , orientation(_alloc)
    , tgtorientation(_alloc)
    , tgtposition(_alloc)
    , order_completed(false)
    , conveyorPart(false)
    , noPartFound(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _tgtorientation_type;
  _tgtorientation_type tgtorientation;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _tgtposition_type;
  _tgtposition_type tgtposition;

   typedef uint8_t _order_completed_type;
  _order_completed_type order_completed;

   typedef uint8_t _conveyorPart_type;
  _conveyorPart_type conveyorPart;

   typedef uint8_t _noPartFound_type;
  _noPartFound_type noPartFound;




  typedef boost::shared_ptr< ::localisation::request_logical_poseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::localisation::request_logical_poseResponse_<ContainerAllocator> const> ConstPtr;

}; // struct request_logical_poseResponse_

typedef ::localisation::request_logical_poseResponse_<std::allocator<void> > request_logical_poseResponse;

typedef boost::shared_ptr< ::localisation::request_logical_poseResponse > request_logical_poseResponsePtr;
typedef boost::shared_ptr< ::localisation::request_logical_poseResponse const> request_logical_poseResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::localisation::request_logical_poseResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::localisation::request_logical_poseResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace localisation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/indigo/share/trajectory_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::localisation::request_logical_poseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localisation::request_logical_poseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localisation::request_logical_poseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localisation::request_logical_poseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localisation::request_logical_poseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localisation::request_logical_poseResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::localisation::request_logical_poseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "10521e1264716de5831c54d482c1f58d";
  }

  static const char* value(const ::localisation::request_logical_poseResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x10521e1264716de5ULL;
  static const uint64_t static_value2 = 0x831c54d482c1f58dULL;
};

template<class ContainerAllocator>
struct DataType< ::localisation::request_logical_poseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "localisation/request_logical_poseResponse";
  }

  static const char* value(const ::localisation::request_logical_poseResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::localisation::request_logical_poseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Vector3 position\n\
geometry_msgs/Quaternion orientation\n\
geometry_msgs/Quaternion tgtorientation\n\
geometry_msgs/Vector3 tgtposition\n\
bool order_completed\n\
bool conveyorPart\n\
bool noPartFound\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::localisation::request_logical_poseResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::localisation::request_logical_poseResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.orientation);
      stream.next(m.tgtorientation);
      stream.next(m.tgtposition);
      stream.next(m.order_completed);
      stream.next(m.conveyorPart);
      stream.next(m.noPartFound);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct request_logical_poseResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::localisation::request_logical_poseResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::localisation::request_logical_poseResponse_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "tgtorientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.tgtorientation);
    s << indent << "tgtposition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.tgtposition);
    s << indent << "order_completed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.order_completed);
    s << indent << "conveyorPart: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.conveyorPart);
    s << indent << "noPartFound: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.noPartFound);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCALISATION_MESSAGE_REQUEST_LOGICAL_POSERESPONSE_H
